# -*- coding: utf-8 -*-
"""ppt program assaigment=3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/147s1FYaK-HKu6wPHjmlHw2s-YbktX2kn

1. Scenario: A company wants to analyze the sales performance of its products in different regions. They have collected the following data:
   Region A: [10, 15, 12, 8, 14]
   Region B: [18, 20, 16, 22, 25]
   Calculate the mean sales for each region.
"""

def calculate_mean_sales(region_sales):
    total_sales = sum(region_sales)
    mean_sales = total_sales / len(region_sales)
    return mean_sales

# Sales data for Region A
region_a_sales = [10, 15, 12, 8, 14]
mean_sales_a = calculate_mean_sales(region_a_sales)
print("Mean sales for Region A:", mean_sales_a)

# Sales data for Region B
region_b_sales = [18, 20, 16, 22, 25]
mean_sales_b = calculate_mean_sales(region_b_sales)
print("Mean sales for Region B:", mean_sales_b)

"""Scenario: A survey is conducted to measure customer satisfaction on a scale of 1 to 5. The data collected is as follows:
   [4, 5, 2, 3, 5, 4, 3, 2, 4, 5]
   Calculate the mode of the survey responses.

"""

import statistics

survey_responses = [4, 5, 2, 3, 5, 4, 3, 2, 4, 5]
mode = statistics.mode(survey_responses)

print("Mode of the survey responses:", mode)

"""Scenario: A company wants to compare the salaries of two departments. The salary data for Department A and Department B are as follows:
   Department A: [5000, 6000, 5500, 7000]
   Department B: [4500, 5500, 5800, 6000, 5200]
   Calculate the median salary for each department.

"""

import statistics

# Salary data for Department A
department_a_salaries = [5000, 6000, 5500, 7000]
median_salary_a = statistics.median(department_a_salaries)
print("Median salary for Department A:", median_salary_a)

# Salary data for Department B
department_b_salaries = [4500, 5500, 5800, 6000, 5200]
median_salary_b = statistics.median(department_b_salaries)
print("Median salary for Department B:", median_salary_b)

"""4. Scenario: A data analyst wants to determine the variability in the daily stock prices of a company. The data collected is as follows:
   [25.5, 24.8, 26.1, 25.3, 24.9]
   Calculate the range of the stock prices.

"""

stock_prices = [25.5, 24.8, 26.1, 25.3, 24.9]

# Calculate the range
price_range = max(stock_prices) - min(stock_prices)

# Print the result
print("The range of the stock prices is:", price_range)

"""5. Scenario: A study is conducted to compare the performance of two different teaching methods. The test scores of the students in each group are as follows:
   Group A: [85, 90, 92, 88, 91]
   Group B: [82, 88, 90, 86, 87]
   Perform a t-test to determine if there is a significant difference in the mean scores between the two groups.

"""

from scipy import stats

# Test scores of Group A and Group B
group_a = [85, 90, 92, 88, 91]
group_b = [82, 88, 90, 86, 87]

# Perform t-test
t_statistic, p_value = stats.ttest_ind(group_a, group_b)

# Print the results
print("T-Statistic:", t_statistic)
print("P-Value:", p_value)

"""6. Scenario: A company wants to analyze the relationship between advertising expenditure and sales. The data collected is as follows:
   Advertising Expenditure (in thousands): [10, 15, 12, 8, 14]
   Sales (in thousands): [25, 30, 28, 20, 26]
   Calculate the correlation coefficient between advertising expenditure and sales.


"""

import numpy as np

# Advertising Expenditure and Sales data
expenditure = [10, 15, 12, 8, 14]
sales = [25, 30, 28, 20, 26]

# Calculate the correlation coefficient
correlation_coefficient = np.corrcoef(expenditure, sales)[0, 1]

# Print the result
print("Correlation Coefficient:", correlation_coefficient)

"""7. Scenario: A survey is conducted to measure the heights of a group of people. The data collected is as follows:
   [160, 170, 165, 155, 175, 180, 170]
   Calculate the standard deviation of the heights.

"""

import numpy as np

# Heights data
heights = [160, 170, 165, 155, 175, 180, 170]

# Calculate the standard deviation
std_deviation = np.std(heights)

# Print the result
print("Standard Deviation of Heights:", std_deviation)

"""8. Scenario: A company wants to analyze the relationship between employee tenure and job satisfaction. The data collected is as follows:
   Employee Tenure (in years): [2, 3, 5, 4, 6, 2, 4]
   Job Satisfaction (on a scale of 1 to 10): [7, 8, 6, 9, 5, 7, 6]
   Perform a linear regression analysis to predict job satisfaction based on employee tenure.

"""

from scipy import stats

# Employee Tenure and Job Satisfaction data
tenure = [2, 3, 5, 4, 6, 2, 4]
satisfaction = [7, 8, 6, 9, 5, 7, 6]

# Perform linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(tenure, satisfaction)

# Print the results
print("Slope:", slope)
print("Intercept:", intercept)
print("R-squared:", r_value**2)
print("P-Value:", p_value)

"""9. Scenario: A study is conducted to compare the effectiveness of two different medications. The recovery times of the patients in each group are as follows:
   Medication A: [10, 12, 14, 11, 13]
   Medication B: [15, 17, 16, 14, 18]
   Perform an analysis of variance (ANOVA) to determine if there is a significant difference in the mean recovery times between the two medications.

"""

from scipy import stats

# Recovery times of Medication A and Medication B
medication_a = [10, 12, 14, 11, 13]
medication_b = [15, 17, 16, 14, 18]

# Perform ANOVA
f_statistic, p_value = stats.f_oneway(medication_a, medication_b)

# Print the results
print("F-Statistic:", f_statistic)
print("P-Value:", p_value)

"""10. Scenario: A company wants to analyze customer feedback ratings on a scale of 1 to 10. The data collected is

 as follows:
    [8, 9, 7, 6, 8, 10, 9, 8, 7, 8]
    Calculate the 75th percentile of the feedback ratings.


"""

import numpy as np

# Feedback ratings data
feedback_ratings = [8, 9, 7, 6, 8, 10, 9, 8, 7, 8]

# Calculate the 75th percentile
percentile_75 = np.percentile(feedback_ratings, 75)

# Print the result
print("75th Percentile of Feedback Ratings:", percentile_75)

"""11. Scenario: A quality control department wants to test the weight consistency of a product. The weights of a sample of products are as follows:
    [10.2, 9.8, 10.0, 10.5, 10.3, 10.1]
    Perform a hypothesis test to determine if the mean weight differs significantly from 10 grams.


"""

from scipy import stats

# Weights data
weights = [10.2, 9.8, 10.0, 10.5, 10.3, 10.1]

# Hypothesized mean weight
hypothesized_mean = 10.0

# Perform one-sample t-test
t_statistic, p_value = stats.ttest_1samp(weights, hypothesized_mean)

# Print the results
print("T-Statistic:", t_statistic)
print("P-Value:", p_value)

"""12. Scenario: A company wants to analyze the click-through rates of two different website designs. The number of clicks for each design is as follows:
    Design A: [100, 120, 110, 90, 95]
    Design B: [80, 85, 90, 95, 100]
    Perform a chi-square test to determine if there is a significant difference in the click-through rates between the two designs.

"""

from scipy import stats

# Click-through rates of Design A and Design B
design_a = [100, 120, 110, 90, 95]
design_b = [80, 85, 90, 95, 100]

# Perform two-sample t-test
t_statistic, p_value = stats.ttest_ind(design_a, design_b)

# Print the results
print("T-Statistic:", t_statistic)
print("P-Value:", p_value)

"""13. Scenario: A survey is conducted to measure customer satisfaction with a product on a scale of 1 to 10. The data collected is as follows:
    [7, 9, 6, 8, 10, 7, 8, 9, 7, 8]
    Calculate the 95% confidence interval for the population mean satisfaction score.

"""

import numpy as np
from scipy import stats

# Satisfaction scores data
satisfaction_scores = [7, 9, 6, 8, 10, 7, 8, 9, 7, 8]

# Calculate the sample mean and standard deviation
sample_mean = np.mean(satisfaction_scores)
sample_std = np.std(satisfaction_scores, ddof=1)

# Calculate the standard error of the mean
standard_error = sample_std / np.sqrt(len(satisfaction_scores))

# Set the desired confidence level
confidence_level = 0.95

# Calculate the margin of error
margin_of_error = stats.t.ppf((1 + confidence_level) / 2, df=len(satisfaction_scores)-1) * standard_error

# Calculate the confidence interval
confidence_interval = (sample_mean - margin_of_error, sample_mean + margin_of_error)

# Print the result
print("95% Confidence Interval:", confidence_interval)

"""14. Scenario: A company wants to analyze the effect of temperature on product performance. The data collected is as follows:
    Temperature (in degrees Celsius): [20, 22, 23, 19, 21]
    Performance (on a scale of 1 to 10): [8, 7, 9, 6, 8]
    Perform a simple linear regression to predict performance based on temperature.

"""

from scipy import stats

# Temperature and Performance data
temperature = [20, 22, 23, 19, 21]
performance = [8, 7, 9, 6, 8]

# Perform simple linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(temperature, performance)

# Print the results
print("Slope:", slope)
print("Intercept:", intercept)
print("R-squared:", r_value**2)
print("P-Value:", p_value)

"""15. Scenario: A study is conducted to compare the preferences of two groups of participants. The preferences are measured on a Likert scale from 1 to 5. The data collected is as follows:
    Group A: [4, 3, 5, 2, 4]
    Group B: [3, 2, 4, 3, 3]
    Perform a Mann-Whitney U test to determine if there is a significant difference in the median preferences between the two groups.

"""

from scipy import stats

# Preferences of Group A and Group B
group_a = [4, 3, 5, 2, 4]
group_b = [3, 2, 4, 3, 3]

# Perform Mann-Whitney U test
u_statistic, p_value = stats.mannwhitneyu(group_a, group_b)

# Print the results
print("U-Statistic:", u_statistic)
print("P-Value:", p_value)

"""16. Scenario: A company wants to analyze the distribution of customer ages. The data collected is as follows:
    [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]
    Calculate the interquartile range (IQR) of the ages.

"""

import numpy as np

# Ages data
ages = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]

# Calculate the IQR
q1 = np.percentile(ages, 25)
q3 = np.percentile(ages, 75)
iqr = q3 - q1

# Print the result
print("Interquartile Range (IQR):", iqr)

"""17. Scenario: A study is conducted to compare the performance of three different machine learning algorithms. The accuracy scores for each algorithm are as follows:
    Algorithm A: [0.85, 0.80, 0.82, 0.87, 0.83]
    Algorithm B: [0.78, 0.82, 0.84, 0.80, 0.79]
    Algorithm C: [0.90, 0.88, 0.89, 0.86, 0.87]
    Perform a Kruskal-Wallis test to determine if there is a significant difference in the median accuracy scores between the algorithms.

"""

from scipy import stats

# Accuracy scores for Algorithm A, Algorithm B, and Algorithm C
algorithm_a = [0.85, 0.80, 0.82, 0.87, 0.83]
algorithm_b = [0.78, 0.82, 0.84, 0.80, 0.79]
algorithm_c = [0.90, 0.88, 0.89, 0.86, 0.87]

# Perform Kruskal-Wallis test
h_statistic, p_value = stats.kruskal(algorithm_a, algorithm_b, algorithm_c)

# Print the results
print("H-Statistic:", h_statistic)
print("P-Value:", p_value)

"""18. Scenario: A company wants to analyze the effect of price on sales. The data collected is as follows:
    Price (in dollars): [10, 15, 12, 8, 14]
    Sales: [100, 80, 90, 110, 95]
    Perform a simple linear regression to predict

 sales based on price.

"""

from scipy import stats

# Price and Sales data
price = [10, 15, 12, 8, 14]
sales = [100, 80, 90, 110, 95]

# Perform simple linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(price, sales)

# Print the results
print("Slope:", slope)
print("Intercept:", intercept)
print("R-squared:", r_value**2)
print("P-Value:", p_value)

"""19. Scenario: A survey is conducted to measure the satisfaction levels of customers with a new product. The data collected is as follows:
    [7, 8, 9, 6, 8, 7, 9, 7, 8, 7]
    Calculate the standard error of the mean satisfaction score.

"""

import numpy as np

# Satisfaction scores data
satisfaction_scores = [7, 8, 9, 6, 8, 7, 9, 7, 8, 7]

# Calculate the standard error of the mean
standard_error = np.std(satisfaction_scores, ddof=1) / np.sqrt(len(satisfaction_scores))

# Print the result
print("Standard Error of the Mean:", standard_error)

"""20. Scenario: A company wants to analyze the relationship between advertising expenditure and sales. The data collected is as follows:
    Advertising Expenditure (in thousands): [10, 15, 12, 8, 14]
    Sales (in thousands): [25, 30, 28, 20, 26]
    Perform a multiple regression analysis to predict sales based on advertising expenditure.



"""

import numpy as np
import statsmodels.api as sm

# Advertising Expenditure and Sales data
expenditure = [10, 15, 12, 8, 14]
sales = [25, 30, 28, 20, 26]

# Add a constant term to the predictor variables
expenditure = sm.add_constant(expenditure)

# Fit the multiple regression model
model = sm.OLS(sales, expenditure)
results = model.fit()

# Print the regression results
print(results.summary())